{% set version = "0.2.0" %}
{% set number = 1 %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% set extras = "" %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
{% set extras = "[sysctk" ~ cuda_major ~ "]" %}
# Prioritize over GPU builds
{% set number = number + 200 %}
{% endif %}

# {{ PYTHON }} is not resolved properly in multi-output recipes...
{% set PYTHON = "python" %}
{% set PYTHON = "$PREFIX/bin/python" %}  # [linux]
{% set PYTHON = "%PREFIX%\\python" %}  # [win]

package:
  name: nvmath-split
  version: {{ version }}

source:
  - url: https://github.com/NVIDIA/nvmath-python/archive/refs/tags/v{{ ".".join(version.split(".")[:3]) }}.tar.gz
    sha256: 155b60e6dbacfea617aa9a2e92d262062916ccc2e3b51af199d4c1e2d9ef6555
    patches:
      - 000-curand-path.patch

build:
  number: {{ number }}
  skip: true  # [py < 310 or osx or ppc64le]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
  host:
    - python

outputs:

  - name: nvmath-python
    version: {{ version }}
    build:
      number: {{ number }}
      string: cuda{{ cuda_major }}_py{{ py }}h{{ PKG_HASH }}_{{ number }}  # [cuda_compiler_version != "None"]
      string: core_py{{ py }}h{{ PKG_HASH }}_{{ number }}  # [cuda_compiler_version == "None"]
      skip: true  # [(py < 310) or cuda_compiler_version not in ("None", "11.8", "12.6")]
      script:
        # do nothing for CUDA 11, as CUDA_PATH is set in the CI images
        - export CUDA_PATH=$BUILD_PREFIX/targets/x86_64-linux/   # [(cuda_compiler_version or "").startswith("12") and linux64]
        - export CUDA_PATH=$BUILD_PREFIX/targets/sbsa-linux/     # [(cuda_compiler_version or "").startswith("12") and aarch64]
        - set CUDA_PATH=%BUILD_PREFIX%\Library                   # [(cuda_compiler_version or "").startswith("12") and win64]
        - export CUDA_PATH=$PREFIX/targets/x86_64-linux/         # [cuda_compiler_version == "None" and linux64]
        - export CUDA_PATH=$PREFIX/targets/sbsa-linux/           # [cuda_compiler_version == "None" and aarch64]
        - set CUDA_PATH=%PREFIX%\Library                         # [cuda_compiler_version == "None" and win64]
        - >-
          {{ PYTHON }} -m pip install --no-deps --no-build-isolation -v .{{ extras }}
      ignore_run_exports_from:
        - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
        - cuda-cudart-dev         # [cuda_compiler_version == "None"]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
        - {{ stdlib('c') }}
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - python                                 # [build_platform != target_platform]
        - cython <3                              # [build_platform != target_platform]
      host:
        - python
        - setuptools >=61.0.0
        - wheel >=0.34.0
        - packaging
        - pip
        - cython <3
        # We use headers from CUDA 12 for simplicity, but they can come from any version.
        # On conda-forge using the CUDA 12 packages is more lightweight.
        - cuda-version 12.*                      # [cuda_compiler_version == "None"]
        - cuda-cudart-dev                        # [cuda_compiler_version == "None"]
        - cuda-crt                               # [cuda_compiler_version == "None"]
        - cuda-version {{ cuda_major }}.*        # [cuda_compiler_version != "None"]
      run:
        - python
        - numpy >=1.24,<3
        - pywin32                         # [win64]
        - cupy                            # [cuda_compiler_version != "None"]  # TODO: remove me in the next release
        - cupy-core                       # [cuda_compiler_version == "None"]  # TODO: remove me in the next release
        - libcublas                       # [(cuda_compiler_version or "").startswith("12")]
        - libcusolver                     # [(cuda_compiler_version or "").startswith("12")]
        - libcusparse                     # [(cuda_compiler_version or "").startswith("12")]
        - libcufft                        # [(cuda_compiler_version or "").startswith("12")]
        - libcurand                       # [(cuda_compiler_version or "").startswith("12")]
        - cuda-version >=12.0.*,<13.0.a0  # [(cuda_compiler_version or "").startswith("12")]
        - cudatoolkit                     # [(cuda_compiler_version or "").startswith("11")]
        - cuda-version >=11.0.*,<12.0.a0  # [(cuda_compiler_version or "").startswith("11")]
      run_constrained:
        - cuda-version >=11.0.*,<13.a0    # [cuda_compiler_version == "None"]
        - mkl 2024
        - libnvpl-fft0 >=0.3.0,<1.0a0
        - mathdx 24.04.0.*
        - numba 0.60.*
        # run_constrained because this is an off-channel package
        - pynvjitlink >=0.2
    test:
      requires:
        - pip
      imports:
        - nvmath
        - nvmath.fft
        - nvmath.linalg
      commands:
        - pip check

  - name: nvmath-python-dx
    build:
      skip: true  # [py < 310 or py > 312]
      skip: true  # [not (linux64 or aarch64)]
      # dx support currently requires CUDA 12
      skip: true  # [not (cuda_compiler_version or "").startswith("12")]
      script:
        - echo "building the [dx] meta package..."
    requirements:
      run:
        # TODO: Move versions to run_constraints on the main package in next release.
        - __unix
        - {{ pin_subpackage("nvmath-python", max_pin='x.x.x') }}
        - cupy  # TODO: remove me in the next release
        - numba 0.60.*
        - cuda-python
        - cuda-nvcc
        - cuda-nvrtc
        - cuda-cudart-dev
        - cuda-cccl
        - mathdx 24.04.0.*
        - cuda-version >=12.0,!=12.4,!=12.5.0
      run_constrained:
        # run_constrained because this is an off-channel package
        - pynvjitlink >=0.2
    test:
      requires:
        - pip
        - pynvjitlink
      imports:
        - nvmath
        - nvmath.device
        - nvmath.fft
        - nvmath.linalg
      commands:
        - pip check
    about:
      license: Apache-2.0
      license_file: LICENSE
      summary: Install this meta-package to use nvmath-python device features
      description: >-
        This is a meta-package which installs a some optional dependencies. The main package
        is nvmath-python.

  - name: nvmath-python-cpu
    requirements:
      run:
        - {{ pin_subpackage("nvmath-python", max_pin='x.x.x') }}
        - mkl  # [x86_64 or linux64]
        - libnvpl-fft0  # [arm64 or aarch64]
    test:
      requires:
        - pip
      imports:
        - nvmath
        - nvmath.fft
        - nvmath.linalg
      commands:
        - pip check
    about:
      license: Apache-2.0
      license_file: LICENSE
      summary: Install this meta-package to use nvmath-python cpu features
      description: >-
        This is a meta-package which installs a some optional dependencies. The main package
        is nvmath-python.

about:
  home: https://developer.nvidia.com/nvmath-python
  license: Apache-2.0
  license_url: https://docs.nvidia.com/cuda/nvmath-python/latest/license.html
  license_file: LICENSE
  summary: NVIDIA Math Libraries for the Python Ecosystem
  description: >-
    nvmath-python aims to bring the power and performance of the NVIDIA math libraries to
    the Python ecosystem with intuitive, pythonic APIs. The ultimate goal is to provide
    users full access to all of the available library features in a variety of execution
    spaces.

    To enable optional features, install any of the following packages: nvmath-python-cpu,
    nvmath-python-dx.
  doc_url: https://docs.nvidia.com/cuda/nvmath-python
  dev_url: https://github.com/NVIDIA/nvmath-python

extra:
  feedstock-name: nvmath
  recipe-maintainers:
    - conda-forge/cuda
    - carterbox
    - leofang
